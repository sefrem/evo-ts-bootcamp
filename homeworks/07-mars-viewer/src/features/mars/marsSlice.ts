import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import api from "../../api";
import { MarsState, Sol } from "./types";

const initialState: MarsState = {
  photos: [],
  sols: {},
  status: "idle",
  selectedSol: 1,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getPhotos = createAsyncThunk<Sol[], void, { state: RootState }>(
  "sols/getSols",
  async (_, { getState }) => {
    const response = await api.getPhotos(getState().mars.selectedSol);
    // The value we return becomes the `fulfilled` action payload
    return response.photos;
  }
);

export const marsSlice = createSlice({
  name: "sols",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSelectedSol: (state, action: PayloadAction<number>) => {
      state.selectedSol = action.payload;
    },
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
  extraReducers: (builder) => {
    builder
      .addCase(getPhotos.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getPhotos.fulfilled, (state, action) => {
        state.status = "idle";
        state.photos.push(...action.payload);
        state.sols[state.selectedSol] = action.payload.map(({ id }) => id);
      });
  },
});

export const { setSelectedSol } = marsSlice.actions;

const selectCurrentSolPhotoIds = (state: RootState): number[] =>
  state.mars.sols[state.mars.selectedSol];
export const selectAllPhotos = (state: RootState): Sol[] => state.mars.photos;

export const selectCurrentSol = (state: RootState): number =>
  state.mars.selectedSol;
export const selectCurrentSolPhotos = createSelector(
  selectAllPhotos,
  selectCurrentSolPhotoIds,
  (photos, currentSolIds) => {
    return photos.filter(({ id }) => currentSolIds?.includes(id));
  }
);
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.mars.value)`
// export const selectCount = (state: RootState) => state.mars.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default marsSlice.reducer;
